/*
Plugin: jQuery Parallax
Version 1.1.3
Author: Ian Lunn
Twitter: @IanLunn
Author URL: http://www.ianlunn.co.uk/
Plugin URL: http://www.ianlunn.co.uk/plugins/jquery-parallax/

Dual licensed under the MIT and GPL licenses:
http://www.opensource.org/licenses/mit-license.php
http://www.gnu.org/licenses/gpl.html
*/

/*
Changes:
- Disabled parallax for 
*/
(function( $ ){
	var $window = $(window);
	var windowHeight = $window.height();
	var windowWidth = $window.width();
	
	// In iOS "fixed" position doesn't work, image is positioned relative to document, not viewport
	// will simulate same effect using "scroll" background attachment and background position
	var noFixedSupport = (navigator.userAgent.match(/(iPad|iPhone|iPod)/g));
	
	$window.resize(function () {
		windowHeight = $window.height();
		windowWidth = $window.width();
	});
	
	$.fn.parallax = function(xpos, speedFactor, outerHeight) {
		var $this = $(this);
		var getHeight;
		var firstTop;
		var paddingTop = 0;
		var wasSmallResolution = false;
		
		//get the starting position of each element to have parallax applied to it		
		$this.each(function(){
		    firstTop = $this.offset().top;
		});
		
		// if there is no 'fixed' position support, we will simulate it
		if (noFixedSupport) {
			$this.css('backgroundAttachment', 'scroll');
		}

		if (outerHeight) {
			getHeight = function(jqo) {
				return jqo.outerHeight(true);
			};
		} else {
			getHeight = function(jqo) {
				return jqo.height();
			};
		}
			
		// setup defaults if arguments aren't specified
		if (arguments.length < 1 || xpos === null) xpos = "50%";
		if (arguments.length < 2 || speedFactor === null) speedFactor = 0.1;
		if (arguments.length < 3 || outerHeight === null) outerHeight = true;
		
		//  check whether resolution has changed
		function resolution () {
			if (windowWidth < 767) {
				if (!wasSmallResolution) {
					wasSmallResolution = true;
					return true;
				}
			} else if (wasSmallResolution) {
				wasSmallResolution = false;
				return true;
			}
			
			return false;
		}
		
		// function to be called whenever the window is scrolled or resized
		function update(){
			if (resolution()) {
				if (windowWidth < 767) {
					// No fixed postiion support for small screens
					$this.css("backgroundPosition","");
					$this.css("backgroundAttachment","scroll");
				} else {
					if (noFixedSupport) {
						$this.css("backgroundAttachment","scroll");
					} else {
						$this.css("backgroundAttachment","fixed");
					}
				}
			}
			
			if (windowWidth < 767) {
				// No fixed postiion support for small images
				return;
			}
			
			var pos = $window.scrollTop();				

			$this.each(function(){
				var $element = $(this);
				var top = $element.offset().top;
				var height = getHeight($element);

				// Check if totally above or totally below viewport
				if (top + height < pos || top > pos + windowHeight) {
					return;
				}
				
				if (noFixedSupport) {
					// Simulate fixed position
					$this.css('backgroundPosition', xpos + " " + Math.round((firstTop - pos) * speedFactor + (pos - top)) + "px");
				} else {
					$this.css('backgroundPosition', xpos + " " + Math.round((firstTop - pos) * speedFactor) + "px");
				}
			});
		}		

		$window.bind('scroll', update).resize(update);
		update();
	};
})(jQuery);