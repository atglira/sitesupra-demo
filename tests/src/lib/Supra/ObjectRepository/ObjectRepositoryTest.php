<?php

namespace Supra\Test\ObjectRepository;

use Supra\ObjectRepository\ObjectRepository;

/**
 * Test class for ObjectRepository.
 * Generated by PHPUnit on 2011-08-16 at 10:50:12.
 */
class ObjectRepositoryTest extends \PHPUnit_Framework_TestCase
{
	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
		
	}

	/**
	 */
	public function testSetDefaultObject()
	{
		// Must find the default
		$a = new ObjectRepositoryTest();
		ObjectRepository::setDefaultObject($a, 'PHPUnit_Framework_TestCase');
		$b = ObjectRepository::getObject($this, 'PHPUnit_Framework_TestCase');
		self::assertEquals($a, $b);
		
		// Default overwritten
		$c = new ObjectRepositoryTest();
		ObjectRepository::setDefaultObject($c, 'PHPUnit_Framework_TestCase');
		$b = ObjectRepository::getObject($this, 'PHPUnit_Framework_TestCase');
		self::assertEquals($c, $b);
		
		// Doesn't match by class name, skip
		$d = new ObjectRepositoryTest();
		ObjectRepository::setObject('Doctrine', $d, 'PHPUnit_Framework_TestCase');
		$b = ObjectRepository::getObject($this, 'PHPUnit_Framework_TestCase');
		self::assertEquals($c, $b);
		
		// Match by parent namespace
		$e = new ObjectRepositoryTest();
		ObjectRepository::setObject('Supra', $e, 'PHPUnit_Framework_TestCase');
		$b = ObjectRepository::getObject($this, 'PHPUnit_Framework_TestCase');
		self::assertEquals($e, $b);
		
		// Match by exact class name
		$f = new ObjectRepositoryTest();
		ObjectRepository::setObject($this, $f, 'PHPUnit_Framework_TestCase');
		$b = ObjectRepository::getObject($this, 'PHPUnit_Framework_TestCase');
		self::assertEquals($f, $b);
		
		// Better match already set, skip
		$g = new ObjectRepositoryTest();
		ObjectRepository::setObject('Supra\Test', $g, 'PHPUnit_Framework_TestCase');
		$b = ObjectRepository::getObject($this, 'PHPUnit_Framework_TestCase');
		self::assertEquals($f, $b);
		
		// Shouldn't find by master class if set by extended class
		$h = new ObjectRepositoryTest();
		ObjectRepository::setObject('Supra\Test', $h, 'Supra\Test\ObjectRepository\ObjectRepositoryTest');
		$b = ObjectRepository::getObject($this, 'PHPUnit_Framework_TestCase');
		self::assertEquals($f, $b);
	}

	/**
	 * Test object class and interface name mismatch
	 * 
	 * @expectedException         \RuntimeException
	 * @expectedExceptionMessage  instance
	 */
	public function testSetObjectInvalidInterfaceName()
	{
		$a = new ObjectRepositoryTest();
		ObjectRepository::setObject('Supra', $a, 'Supra\FileStorage\FileStorage');
	}
	
	/**
	 * @expectedException \Supra\ObjectRepository\Exception\RuntimeException
	 */
	public function testWrongInterfaceException()
	{
		$object = new \stdClass();
		@ObjectRepository::setEntityManager($this, $object);
	}
	
	public function testControllerContext()
	{
		ObjectRepository::resetControllerContext();
		
		ObjectRepository::beginControllerContext('a');
		ObjectRepository::beginControllerContext('b');
		ObjectRepository::beginControllerContext('c');
		ObjectRepository::endControllerContext('c');
		ObjectRepository::endControllerContext('b');
		ObjectRepository::endControllerContext('a');
	}
	
	/**
	 * @expectedException \Supra\ObjectRepository\Exception\LogicException
	 */
	public function testControllerContextEndFail()
	{
		ObjectRepository::resetControllerContext();
		
		ObjectRepository::beginControllerContext('a');
		ObjectRepository::beginControllerContext('b');
		ObjectRepository::beginControllerContext('c');
		ObjectRepository::endControllerContext('a');
	}
	
	public function testFoundByController()
	{
		ObjectRepository::resetControllerContext();
		
		$a = new \stdClass();
		$b = new \stdClass();
		$c = new \stdClass();
		
		ObjectRepository::setDefaultObject($a, 'stdClass');
		ObjectRepository::setObject('My\Namespace', $b, 'stdClass');
		ObjectRepository::setObject('My\Namespace\Controller', $c, 'stdClass');
		
		self::assertEquals($a, ObjectRepository::getObject($this, 'stdClass'));
		self::assertEquals($b, ObjectRepository::getObject('My\Namespace', 'stdClass'));
		self::assertEquals($c, ObjectRepository::getObject('My\Namespace\Controller', 'stdClass'));
		
		ObjectRepository::beginControllerContext('My\Namespace\Controller');
		
		self::assertEquals($a, ObjectRepository::getObject($this, 'stdClass'));
		self::assertEquals($a, ObjectRepository::getObject('My\Namespace', 'stdClass'));
		self::assertEquals($a, ObjectRepository::getObject('My\Namespace\Controller', 'stdClass'));
		
		ObjectRepository::endControllerContext('My\Namespace\Controller');
		
		self::assertEquals($a, ObjectRepository::getObject($this, 'stdClass'));
		self::assertEquals($b, ObjectRepository::getObject('My\Namespace', 'stdClass'));
		self::assertEquals($c, ObjectRepository::getObject('My\Namespace\Controller', 'stdClass'));
	}
	
	/**
	 * @expectedException \Supra\ObjectRepository\Exception\RuntimeException
	 */
	public function testBadCallerPassed()
	{
		ObjectRepository::getApplicationConfiguration(-1);
	}
	
	/**
	 * @expectedException \Supra\ObjectRepository\Exception\ObjectRepositoryException
	 */
	public function testAddBindingNotObject()
	{
		@ObjectRepository::setDefaultLocaleManager(false);
	}
	
	/**
	 * @expectedException \Supra\ObjectRepository\Exception\ObjectRepositoryException
	 */
	public function testAddBindingWrongCallerType()
	{
		ObjectRepository::setApplicationConfiguration(-1, new \Supra\Cms\ApplicationConfiguration());
	}
	
	/**
	 * @expectedException \Supra\ObjectRepository\Exception\ObjectRepositoryException
	 */
	public function testEmptyControllerStackEndException()
	{
		ObjectRepository::resetControllerContext();
		
		ObjectRepository::endControllerContext('fail');
	}
	
}
