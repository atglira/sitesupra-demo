<?php

namespace Doctrine\Tests\Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class DoctrineTestsModelsECommerceECommerceCustomerProxy extends \Doctrine\Tests\Models\ECommerce\ECommerceCustomer implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    private function _load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister);
            unset($this->_identifier);
        }
    }

    
    public function getId()
    {
        $this->_load();
        return parent::getId();
    }

    public function getName()
    {
        $this->_load();
        return parent::getName();
    }

    public function setName($name)
    {
        $this->_load();
        return parent::setName($name);
    }

    public function setCart(\Doctrine\Tests\Models\ECommerce\ECommerceCart $cart)
    {
        $this->_load();
        return parent::setCart($cart);
    }

    public function brokenSetCart(\Doctrine\Tests\Models\ECommerce\ECommerceCart $cart)
    {
        $this->_load();
        return parent::brokenSetCart($cart);
    }

    public function getCart()
    {
        $this->_load();
        return parent::getCart();
    }

    public function removeCart()
    {
        $this->_load();
        return parent::removeCart();
    }

    public function setMentor(\Doctrine\Tests\Models\ECommerce\ECommerceCustomer $mentor)
    {
        $this->_load();
        return parent::setMentor($mentor);
    }

    public function removeMentor()
    {
        $this->_load();
        return parent::removeMentor();
    }

    public function getMentor()
    {
        $this->_load();
        return parent::getMentor();
    }


    public function __sleep()
    {
        if (!$this->__isInitialized__) {
            throw new \RuntimeException("Not fully loaded proxy can not be serialized.");
        }
        return array('id', 'name', 'cart', 'mentor');
    }
}