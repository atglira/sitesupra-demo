<?php

namespace Supra\Tests\Request;

use Supra\Request\RequestData;

/**
 * Test class for RequestData.
 * Generated by PHPUnit on 2011-11-17 at 16:24:06.
 */
class RequestDataTest extends \PHPUnit_Framework_TestCase
{

	protected $post;
	
	/**
	 * @var RequestData
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->post = array(
			'id' => 4,
			'avatar' => null,
			//'name' => '',
			'emails' => array(
				'email@example.org',
				'email2@example.org',
				'email3@example.org',
				'email4@example.org',
				'email5',
			),
			'data' => array(
				'prop1' => 5
			),
		);
		
		$this->object = new RequestData($this->post);
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
		
	}
	
	public function testToArray()
	{
		self::assertEquals($this->post, (array) $this->object);
	}
	
	public function testArrayAccess()
	{
		self::assertEquals($this->post['emails'][0], $this->object['emails'][0]);
		self::assertEquals(isset($this->post['emails'][0]), isset($this->object['emails'][0]));
		// This one fails, but must live with that (#41727)
//		self::assertEquals(isset($this->post['avatar']), isset($this->object['avatar']));
		self::assertEquals(empty($this->post['avatar']), empty($this->object['avatar']));
		self::assertEquals(isset($this->post['avatar'][0]), isset($this->object['avatar'][0]));
	}

	public function testHas()
	{
		self::assertTrue($this->object->has('id'));
		self::assertTrue($this->object->has('avatar'));
		self::assertFalse($this->object->has('name'));
		self::assertFalse($this->object->has('emails'));
	}

	public function testHasArray()
	{
		self::assertFalse($this->object->hasArray('id'));
		self::assertFalse($this->object->hasArray('avatar'));
		self::assertFalse($this->object->hasArray('name'));
		self::assertTrue($this->object->hasArray('data'));
		self::assertTrue($this->object->hasArray('emails'));
	}

	public function testGetNext()
	{
		$emails = $this->object->getArray('emails');
		$emailArray = array();
		
		while ($emails->valid()) {
			$emailArray[] = $emails->getNext();
		}
		
		self::assertEquals(array_values(iterator_to_array($emails)), $emailArray);
	}

	public function testGetArray()
	{
		$emails = $this->object->getArray('emails');
	}
	
	/**
	 * @expectedException \RuntimeException
	 */
	public function testGetArrayFailure()
	{
		$emails = $this->object->getArray('avatar');
	}
	/**
	 * @expectedException \OutOfBoundsException
	 */
	public function testGetNextFailure()
	{
		$emails = $this->object->getArray('emails');
		$emailArray = array();
		
		while ($emails->valid()) {
			$emailArray[] = $emails->getNext();
		}
		
		$emails->getNext();
	}

}
