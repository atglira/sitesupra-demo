<?php

namespace Supra\Controller\Pages\Configuration;

use Supra\Controller\Pages\BlockControllerCollection;
use Supra\Loader\Loader;
use Supra\Configuration\ConfigurationInterface;
use Supra\Configuration\ComponentConfiguration;

/**
 * Block configuration class
 * @author Dmitry Polovka <dmitry.polovka@videinfra.com>
 */
class BlockControllerConfiguration extends ComponentConfiguration
{
	/**
	 * Group id 
	 * @var string
	 */
	public $groupId = null;
	
	/**
	 * @var string
	 */
	public $description;

	/**
	 * Local icon path
	 * @var string
	 */
	public $icon;

	/**
	 * Full icon web path, autogenerated if empty
	 * @var string
	 */
	public $iconWebPath = '/cms/lib/supra/img/blocks/icons-items/default.png';
	
	/**
	 * CMS classname for the block
	 * @var string
	 */
	public $cmsClassname = 'Editable';

	/**
	 * Block controller class name
	 * @var string
	 */
	public $controllerClass;

	/**
	 * Should be block hidden from block menu or not
	 * @var boolean
	 */
	public $hidden = false;
	
	/**
	 * Can only one block exist on a page
	 * @var boolean
	 */
	public $unique = false;
	
	/**
	 * Block HTML description
	 * @var string
	 */
	public $html;
	
	/**
	 * Cache implementation
	 * @var BlockControllerCacheConfiguration
	 */
	public $cache;
	
	/**
	 * TODO: should have possibility to declare in YML
	 * @var array of block properties
	 */
	public $properties = array();
	
	/**
	 * Adds block configuration to block controller collection
	 */
	public function configure()
	{
		if (empty($this->class)) {
			\Log::warn("Configuration property BlockControllerConfiguration::controllerClass deplrecated; use class instead.");
			$this->class = $this->controllerClass;
		}
		
		if (empty($this->id)) {
			$id = str_replace('\\', '_', $this->class);
			$this->id = $id;
		}
		
		if ( ! empty($this->icon)) {
			$this->iconWebPath = $this->getIconWebPath();
		}
		
		if (empty($this->properties)) {
			$class = $this->class;
			
			// TODO: might be removed later
			if (Loader::classExists($class)) {
				if (method_exists($class, 'getPropertyDefinition')) {
					$editables = (array) $class::getPropertyDefinition();
					
					foreach ($editables as $name => $editable) {
						$this->properties[] = $property = new BlockPropertyConfiguration();
						$property->name = $name;
						$property->editableInstance = $editable;
					}
				}
			}
		}

		BlockControllerCollection::getInstance()
				->addBlockConfiguration($this);
		
		parent::configure();
	}

	/**
	 * Return icon webpath
	 * @return string
	 */
	private function getIconWebPath()
	{
		$file = Loader::getInstance()->findClassPath($this->class);
		$dir = dirname($file);
		$iconPath = $dir . '/' . $this->icon;

//		// Disabled for performance
//		if ( ! file_exists($iconPath)) {
//			$iconPath = null;
//		} else
		
		if (strpos($iconPath, SUPRA_WEBROOT_PATH) !== 0) {
			$iconPath = null;
		} else {
			$iconPath = substr($iconPath, strlen(SUPRA_WEBROOT_PATH) - 1);
		}
		
		if (DIRECTORY_SEPARATOR === '\\') {
			$iconPath = str_replace(DIRECTORY_SEPARATOR, '/', $iconPath);
		}

		return $iconPath;
	}
	
	/**
	 * @param string $name
	 * @return BlockPropertyConfiguration
	 */
	public function getProperty($name)
	{
		foreach ($this->properties as $property) {
			/* @var $property BlockPropertyConfiguration */
			if ($property->name === $name) {
				return $property;
			}
		}
	}
	
}
