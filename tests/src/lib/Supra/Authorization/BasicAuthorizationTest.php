<?php

namespace Supra\Tests\Authorization;

use Supra\ObjectRepository\ObjectRepository;
use Supra\Authorization\AuthorizationProvider;
use Supra\Authorization\AuthorizationPermission;
use Supra\Authorization\PermissionStatus;

use Supra\NestedSet\ArrayRepository;

require_once SUPRA_COMPONENT_PATH . 'Authentication/AuthenticationSessionNamespace.php';

/**
 * Test class for ObjectRepository.
 * Generated by PHPUnit on 2011-08-16 at 10:50:12.
 */
class BasicAuthorizationTest extends \PHPUnit_Framework_TestCase 
{
	/**
	 * @var \Doctrine\ORM\EntityManager
	 */
	private $em; 
	
	/**
	 * @var AuthorizationProvider
	 */
	private $ap;
	
	
	/**
	 *
	 * @var \Supra\User\UserProvider;
	 */
	private $up;
	
	function setUp() 
	{
		$this->em = ObjectRepository::getEntityManager($this);
		
		// ACL model creation
		try {
			$this->em->getConnection()->getWrappedConnection()->exec(file_get_contents(SUPRA_PATH . '/../database/mysql.sql'));
		} catch (\Exception $e) {}
		
		$this->em->beginTransaction();
//		$this->em->beginTransaction();
		
		$this->up = ObjectRepository::getUserProvider($this);

		$this->ap = new AuthorizationProvider(
			ObjectRepository::getEntityManager($this),
			array(
				'class_table_name'         => 'acl_classes',
				'entry_table_name'         => 'acl_entries',
				'oid_table_name'           => 'acl_object_identities',
				'oid_ancestors_table_name' => 'acl_object_identity_ancestors',
				'sid_table_name'           => 'acl_security_identities',
			)
		);
		ObjectRepository::setDefaultAuthorizationProvider($this->ap);
		
		$sessionHandler = new \Supra\Session\Handler\PhpSessionHandler();

		$sessionNamespaceManager = new \Supra\Session\SessionNamespaceManager($sessionHandler);
		ObjectRepository::setDefaultSessionNamespaceManager($sessionNamespaceManager);

		$authenticationSessionNamespace = $sessionNamespaceManager
			->getOrCreateSessionNamespace('Tests', 'Supra\Tests\Authentication\AuthenticationSessionNamespace');

		ObjectRepository::setSessionNamespace(__NAMESPACE__, $authenticationSessionNamespace);	
	}
	
	function makeNewUser() 
	{
		$name = 'test_' . rand(0, 999999999);
		
		$em = ObjectRepository::getEntityManager($this);
		/* @var $em Doctrine\ORM\EntityManager */
		
		$user = new \Supra\User\Entity\User();
		$em->persist($user);

		$user->setName($name);
		$user->setEmail($name . '@' . $name . '.com');
		
		ObjectRepository::getUserProvider($this)
						->getAuthAdapter()
						->credentialChange($user, 'Noris');

		$em->flush();		
		
		\Log::debug('Made test user: ' . $name);
		
		return $user;
	}
	
	function tearDown() 
	{
		$this->em->rollback();
//		$this->em->rollback();
	}
	
	function testControllerGrantAccessPermission() 
	{
		$controller = new DummyAuthorizedController();
		
		$user1 = $this->makeNewUser();
		$user2 = $this->makeNewUser();
		$user3 = $this->makeNewUser();

		$this->ap->grantControllerAllAccessPermission($user1, $controller);
		$this->ap->grantControllerSomeAccessPermission($user3, $controller);
		
		self::assertEquals($this->ap->isControllerAllAccessGranted($user1, $controller), true);
		self::assertEquals($this->ap->isControllerAllAccessGranted($user2, $controller), false);

		self::assertEquals($this->ap->isControllerAllAccessGranted($user3, $controller), false);		
		self::assertEquals($this->ap->isControllerSomeAccessGranted($user3, $controller), true);
		
		$this->ap->revokeControllerAllAccessPermission($user1, $controller);
		$this->ap->grantControllerSomeAccessPermission($user1, $controller);
		
		self::assertEquals($this->ap->isControllerAllAccessGranted($user1, $controller), false);
		self::assertEquals($this->ap->isControllerAllAccessGranted($user2, $controller), false);
		self::assertEquals($this->ap->isControllerAllAccessGranted($user3, $controller), false);
		
		self::assertEquals($this->ap->isControllerSomeAccessGranted($user1, $controller), true);
	}
	
	function testEntityAccessPermission() 
	{
		$user1 = $this->makeNewUser();
		
		$rep = new ArrayRepository();
		
		$nodeNames = array(
				'meat',
				'fruit',
				'yellow',
				'red',
				'cherry',
				'tomato',
				'banana',
				'pork',
				'beef',
				'fish',
				'shark',
				'tuna'
			);
			
		$nodes = array();
		foreach($nodeNames as $nodeName) {
			
			$nodes[$nodeName] = new DummyAuthorizedEntity($nodeName);
			$rep->add($nodes[$nodeName]);
		}
		
		$nodes['meat']->addChild($nodes['pork']);
		$nodes['meat']->addChild($nodes['beef']);
		$nodes['meat']->addChild($nodes['fish']);
		$nodes['fish']->addChild($nodes['shark']);
		$nodes['fish']->addChild($nodes['tuna']);
		
		$nodes['fruit']->addChild($nodes['yellow']);
		$nodes['fruit']->addChild($nodes['red']);
		
		$nodes['yellow']->addChild($nodes['banana']);
		
		$nodes['red']->addChild($nodes['cherry']);
		$nodes['red']->addChild($nodes['tomato']);
		
		$editPermissionType = $nodes['fruit']->getEditPermissionType();
		
		$this->ap->setPermsission($user1, $nodes['fruit'], $editPermissionType, PermissionStatus::ALLOW);
		
		self::assertEquals($this->ap->isPermissionGranted($user1, $nodes['fruit'], $editPermissionType), true);
		self::assertEquals($this->ap->isPermissionGranted($user1, $nodes['banana'], $editPermissionType), true);
		
		$this->ap->setPermsission($user1, $nodes['fish'], $editPermissionType, PermissionStatus::ALLOW);

		self::assertEquals($this->ap->isPermissionGranted($user1, $nodes['tuna'], $editPermissionType), true);
		self::assertEquals($this->ap->isPermissionGranted($user1, $nodes['meat'], $editPermissionType), false);
	}
}
