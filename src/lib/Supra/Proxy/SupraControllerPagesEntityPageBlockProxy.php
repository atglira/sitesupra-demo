<?php

namespace Supra\Proxy;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class SupraControllerPagesEntityPageBlockProxy extends \Supra\Controller\Pages\Entity\PageBlock implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getLocked()
    {
        $this->__load();
        return parent::getLocked();
    }

    public function getPlaceHolder()
    {
        $this->__load();
        return parent::getPlaceHolder();
    }

    public function setPlaceHolder(\Supra\Controller\Pages\Entity\Abstraction\PlaceHolder $placeHolder)
    {
        $this->__load();
        return parent::setPlaceHolder($placeHolder);
    }

    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function getComponent()
    {
        $this->__load();
        return parent::getComponent();
    }

    public function setComponent($component)
    {
        $this->__load();
        return parent::setComponent($component);
    }

    public function getPosition()
    {
        $this->__load();
        return parent::getPosition();
    }

    public function setPosition($position)
    {
        $this->__load();
        return parent::setPosition($position);
    }

    public function addBlockProperty(\Supra\Controller\Pages\Entity\BlockProperty $blockProperty)
    {
        $this->__load();
        return parent::addBlockProperty($blockProperty);
    }

    public function inPlaceHolder(array $placeHolderIds)
    {
        $this->__load();
        return parent::inPlaceHolder($placeHolderIds);
    }

    public function createController()
    {
        $this->__load();
        return parent::createController();
    }

    public function prepareController(\Supra\Controller\Pages\BlockController $controller, \Supra\Controller\Pages\Request\Request $request)
    {
        $this->__load();
        return parent::prepareController($controller, $request);
    }

    public function executeController(\Supra\Controller\Pages\BlockController $controller)
    {
        $this->__load();
        return parent::executeController($controller);
    }

    public function getRepository()
    {
        $this->__load();
        return parent::getRepository();
    }

    public function getProperty($name)
    {
        $this->__load();
        return parent::getProperty($name);
    }

    public function getDiscriminator()
    {
        $this->__load();
        return parent::getDiscriminator();
    }

    public function matchDiscriminator(\Supra\Controller\Pages\Entity\Abstraction\Entity $object, $strict = true)
    {
        $this->__load();
        return parent::matchDiscriminator($object, $strict);
    }

    public function __toString()
    {
        $this->__load();
        return parent::__toString();
    }

    public function equals(\Supra\Controller\Pages\Entity\Abstraction\Entity $entity)
    {
        $this->__load();
        return parent::equals($entity);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'component', 'position', 'placeHolder', 'blockProperties', 'locked');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}