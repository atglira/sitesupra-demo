<?php

namespace Supra\Tests\Authorization;

use Supra\ObjectRepository\ObjectRepository;
use Supra\Authorization\AuthorizationProvider;
use Supra\Authorization\AuthorizationPermission;

use Supra\Cms\CmsApplicationConfiguration;

require_once SUPRA_COMPONENT_PATH . 'Authentication/AuthenticationSessionNamespace.php';

/**
 * Test class for ObjectRepository.
 * Generated by PHPUnit on 2011-08-16 at 10:50:12.
 */
class Fixture extends \PHPUnit_Framework_TestCase 
{
	/**
	 * @var \Doctrine\ORM\EntityManager
	 */
	private $em; 
	
	/**
	 * @var AuthorizationProvider
	 */
	private $ap;
	
	/**
	 *
	 * @var \Supra\User\UserProvider;
	 */
	private $up;
	
	function setUp() 
	{
		$this->em = ObjectRepository::getEntityManager('Supra\Tests');
		
		$this->up = ObjectRepository::getUserProvider('Supra\Tests');

		$this->ap = new AuthorizationProvider(
			$this->em,
			array(
				'class_table_name'         => 'acl_classes',
				'entry_table_name'         => 'acl_entries',
				'oid_table_name'           => 'acl_object_identities',
				'oid_ancestors_table_name' => 'acl_object_identity_ancestors',
				'sid_table_name'           => 'acl_security_identities',
			)
		);
		ObjectRepository::setDefaultAuthorizationProvider($this->ap);
		
		$sessionHandler = new \Supra\Session\Handler\PhpSessionHandler();

		$sessionNamespaceManager = new \Supra\Session\SessionNamespaceManager($sessionHandler);
		ObjectRepository::setDefaultSessionNamespaceManager($sessionNamespaceManager);

		$authenticationSessionNamespace = $sessionNamespaceManager
			->getOrCreateSessionNamespace('Supra\Tests', 'Project\SampleAuthentication\AuthenticateSessionNamespace');

		ObjectRepository::setSessionNamespace(__NAMESPACE__, $authenticationSessionNamespace);	
	}
	
	function testFixture()
	{
		$adminUserName = 'admin';
		
		$adminUser = $this->up->findUserByLogin($adminUserName);
		
		if( empty($adminUser)) {
			
			$adminUser = new \Supra\User\Entity\User();
			$this->em->persist($adminUser);

			$adminUser->setLogin($adminUserName);
			$adminUser->setName($adminUserName);
			$adminUser->resetSalt();
			$adminUser->setEmail($adminUserName);

			$this->up->getAuthAdapter()->credentialChange($adminUser, $adminUserName);
			$this->em->flush();		
		}
		
		require_once SUPRA_WEBROOT_PATH . 'cms/config.php';
		
		foreach(CmsApplicationConfiguration::getInstance()->getArray() as $appConfig) {
			
			if($appConfig->id == 'media-library') {
				$this->ap->grantApplicationExecuteAccessPermission($adminUser, $appConfig);
			}
			else {
				$this->ap->grantApplicationAllAccessPermission($adminUser, $appConfig);
			}
				
		}
	}
}