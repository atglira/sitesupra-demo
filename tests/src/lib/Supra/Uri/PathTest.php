<?php

namespace Supra\Tests\Uri;

use Supra\Uri\Path;

/**
 * Test class for Path.
 * Generated by PHPUnit on 2010-07-05 at 16:22:59.
 */
class PathTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var Path
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = new Path('');
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {

	}

	/**
	 */
	public function testSetPath() {
		// Remove the following lines when you implement this test.
		$this->object->setPath('a/b/c');
	}

	/**
	 */
	public function testGetPath() {
		// Remove the following lines when you implement this test.
		$this->object->setPath('a/b/c');
		$path = $this->object->getPath();
		self::assertEquals('a/b/c', $path);
		
		$this->object->setPath('xxx');
		$path = $this->object->getPath();
		self::assertEquals('xxx', $path);
		
		$this->object->setPath('/');
		$path = $this->object->getPath();
		self::assertEquals('', $path);
		
		$this->object->setPath('/c/b/a/');
		$path = $this->object->getPath();
		self::assertEquals('c/b/a', $path);
	}

	/**
	 */
	public function testGetPathList() {
		$this->object->setPath('a/b/c');
		self::assertEquals(array('a', 'b', 'c'), $this->object->getPathList());

		$this->object->setPath('/');
		self::assertEquals(array(), $this->object->getPathList());
	}

	/**
	 */
	public function testGetFullPath() {
		$this->object->setPath('a/b/c');
		self::assertEquals('/a/b/c', $this->object->getFullPath());

		$path = new Path('/a/b');
		$this->object->setPath('a/b/c');
		$this->object->setBasePath($path);
		self::assertEquals('/a/b/c', $this->object->getFullPath());

		$success = true;
		try {
			$path = new Path('/a/d');
			$this->object->setPath('a/b/c');
			$this->object->setBasePath($path);
			$success = true;
		} catch (\Exception $e) {
			$success = false;
		}
		self::assertFalse($success);
	}

	/**
	 */
	public function testGetDepth() {
		$path = new Path('');
		self::assertEquals($path->getDepth(), 0);
		$path = new Path('/');
		self::assertEquals($path->getDepth(), 0);
		$path = new Path('xxx');
		self::assertEquals($path->getDepth(), 1);
		$path = new Path('/xxx');
		self::assertEquals($path->getDepth(), 1);
		$path = new Path('/x/x/x');
		self::assertEquals($path->getDepth(), 3);
	}

	/**
	 * @todo Implement testSetCaseSensitive().
	 */
	public function testSetCaseSensitive() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testGetSeparator().
	 */
	public function testGetSeparator() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testStartsWith().
	 */
	public function testStartsWith() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testSetBasePath().
	 */
	public function testSetBasePath() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement test__toString().
	 */
	public function test__toString() {
		$this->object->setPath('a/b/c');
		self::assertEquals('/a/b/c', $this->object->__toString());

		$path = new Path('/a/b');
		$this->object->setPath('a/b/c');
		$this->object->setBasePath($path);
		self::assertEquals('/[a/b]/c', $this->object->__toString());

		$this->object = new Path('a/b/c/d/e/');
		$path = new Path('/a/b');
		$this->object->setBasePath($path);
		$path = new Path('c');
		$this->object->setBasePath($path);
		self::assertEquals('/[a/b]/[c]/d/e', $this->object->__toString());
	}

}