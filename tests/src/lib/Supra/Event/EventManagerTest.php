<?php

namespace Supra\Tests\Event;

use Supra\Event\EventManager;
use Supra\Tests\Event\Mockup\EventArgs;

/**
 * Test class for EventManager.
 * Generated by PHPUnit on 2011-10-27 at 12:51:57.
 */
class EventManagerTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var EventManager
	 */
	protected $object;
	
	private $fired = array();

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->object = new EventManager;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
		
	}

	/**
	 * @todo Implement testGetEmptyInstance().
	 */
	public function testGetEmptyInstance()
	{
		$emptyInstance = EventManager::getEmptyInstance();
		self::assertInstanceOf('Supra\Event\EventManager', $emptyInstance);
		
		$emptyInstance2 = EventManager::getEmptyInstance();
		self::assertTrue($emptyInstance === $emptyInstance2);
		
		$emptyInstance->listen('a', function () {\PHPUnit_Framework_TestCase::fail("No listener should be executed for the empty event manager");});
		$emptyInstance->fire('a');
		$emptyInstance2->fire('a');
		
		$emptyInstance2->fire('b');
	}
	
	public function fired(EventArgs $eventArgs, $id)
	{
		if ( ! isset($this->fired[$id])) {
			$this->fired[$id] = 0;
		}
		$this->fired[$id]++;
	}
	
	private function getAndCleanFired()
	{
		$fired = $this->fired;
		$this->fired = array();
		
		return $fired;
	}
	
	public function __call($name, $arguments)
	{
		if (strpos($name, 'fire') !== 0) throw new \BadMethodCallException("No such method $name");
		$id = substr($name, 4);
		$this->fired($arguments[0], $id);
	}
	
	private function createListener($id, $type)
	{
		$listener = null;
		
		switch ($type) {
			
			// Closure
			case 'f':
				$self = $this;
				$listener = function (EventArgs $eventArgs) use ($self, $id) {$self->fired($eventArgs, $id);};
				break;
			
			// Callable
			case 'c':
				return array($this, 'fire' . $id);
				break;
			
			// Object
			case 'o':
				return new Mockup\Listener($this, $id);
				break;
			default:
				self::fail("invalid listener type $type was passed to the createListener method");
		}
		
		return $listener;
	}

	/**
	 * @todo Implement testListen().
	 */
	public function testListen()
	{
		$this->object->listen('a', $this->createListener(1, 'f'));
		$this->object->listen('a', $this->createListener(2, 'c'));
		$this->object->listen('a', $this->createListener(3, 'o'));
		
		$this->object->listen(array('a', 'b'), $this->createListener(4, 'f'));
		$this->object->listen(array('c'), $this->createListener(5, 'o'));
	}
	
	/**
	 * @todo Implement testFire().
	 */
	public function testFire()
	{
		$this->object->listen('a', $this->createListener(1, 'f'));
		$this->object->listen('a', $this->createListener(2, 'c'));
		$this->object->listen('a', $this->createListener(3, 'o'));
		
		$this->object->listen(array('a', 'b'), $this->createListener(4, 'f'));
		$this->object->listen(array('c'), $this->createListener(5, 'o'));
		$this->object->listen(array('c'), $this->createListener(5, 'o'));
		
		$this->object->fire('a', new EventArgs($this, 'a'));
		self::assertEquals(array(1 => 1, 2 => 1, 3 => 1, 4 => 1), $this->getAndCleanFired());
		
		$this->object->fire('A', new EventArgs($this, 'A'));
		self::assertEquals(array(), $this->getAndCleanFired());
		
		$this->object->fire('b', new EventArgs($this, 'b'));
		self::assertEquals(array(4 => 1), $this->getAndCleanFired());
		
		$this->object->fire('c', new EventArgs($this, 'c'));
		self::assertEquals(array(5 => 2), $this->getAndCleanFired());
	}

	/**
	 * @todo Implement testRemoveListeners().
	 */
	public function testRemoveListeners()
	{
		$this->object->listen('a', $this->createListener(1, 'f'));
		$this->object->fire('a', new EventArgs($this, 'a'));
		self::assertEquals(array(1 => 1), $this->getAndCleanFired());
		
		$this->object->removeListeners(null);
		$this->object->fire('a', new EventArgs($this, 'a'));
		self::assertEquals(array(1 => 1), $this->getAndCleanFired());
		
		$this->object->removeListeners('A');
		$this->object->fire('a', new EventArgs($this, 'a'));
		self::assertEquals(array(1 => 1), $this->getAndCleanFired());
		
		$this->object->removeListeners('a');
		$this->object->fire('a', new EventArgs($this, 'a'));
		self::assertEquals(array(), $this->getAndCleanFired());
	}

	/**
	 * @todo Implement testRemoveListener().
	 */
	public function testRemoveListener()
	{
		$listenerA = $this->createListener(1, 'c');
		$listenerB = $this->createListener(2, 'o');
		$listenerC = $this->createListener(2, 'o');
		
		$this->object->listen(array('a', 'b'), $listenerA);
		$this->object->listen('a', $listenerB);
		$this->object->listen(array('c', 'd'), $listenerC);
		$this->object->fire('a', new EventArgs($this, 'a'));
		self::assertEquals(array(1 => 1, 2 => 1), $this->getAndCleanFired());
		
		$removed = $this->object->removeListener('a', $listenerC);
		self::assertEquals(false, $removed);
		$this->object->fire('a', new EventArgs($this, 'a'));
		self::assertEquals(array(1 => 1, 2 => 1), $this->getAndCleanFired());
		
		$removed = $this->object->removeListener('a', $listenerA);
		self::assertEquals(true, $removed);
		$this->object->fire('a', new EventArgs($this, 'a'));
		self::assertEquals(array(2 => 1), $this->getAndCleanFired());
		
		$removed = $this->object->removeListener(array('c', 'd'), $listenerC);
		self::assertEquals(true, $removed);
		$this->object->fire('c', new EventArgs($this, 'c'));
		self::assertEquals(array(), $this->getAndCleanFired());
		$this->object->fire('d', new EventArgs($this, 'd'));
		self::assertEquals(array(), $this->getAndCleanFired());
	}

}

?>
