<?php

namespace Supra\Tests\Authentication\Adapter\Algorithm;

use Supra\Authentication\Adapter\Algorithm\Sha1Algorithm;

require_once dirname(__FILE__) . '/../../../../../../../src/lib/Supra/Authentication/Adapter/Algorithm/Sha1Algorithm.php';

/**
 * Test class for Sha1Algorithm.
 * Generated by PHPUnit on 2011-12-01 at 12:00:43.
 */
class Sha1AlgorithmTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var Sha1Algorithm
	 */
	protected $object;
	protected $password;
	protected $password2;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->object = new Sha1Algorithm;
		$this->password = new \Supra\Authentication\AuthenticationPassword('admin123');
		$this->password2 = new \Supra\Authentication\AuthenticationPassword('admin1234');
		
		$this->salt = uniqid();
		$this->salt2 = uniqid();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
		
	}

	/**
	 * @covers {className}::{origMethodName}
	 */
	public function testCrypt()
	{
		$hash1 = $this->object->crypt($this->password, $this->salt);
		$hash2 = $this->object->crypt($this->password, $this->salt);
		$hash3 = $this->object->crypt($this->password, $this->salt2);
		$hash4 = $this->object->crypt($this->password2, $this->salt);
		
		self::assertEquals($hash1, $hash2);
		self::assertNotEquals($hash1, $hash3);
		self::assertNotEquals($hash1, $hash4);
	}

	/**
	 * @covers {className}::{origMethodName}
	 */
	public function testValidate()
	{
		self::assertTrue($this->object->validate($this->password, '091b5bd20c8ce45988793c64a3a11aeed7c300a0', '4ed7511acb009'));
		self::assertFalse($this->object->validate($this->password, '091b5bd20c8ce45988793c64a3a11aeed7c300a0 ', '4ed7511acb009'));
		self::assertFalse($this->object->validate($this->password, '091b5bd20c8ce45988793c64a3a11aeed7c300a0', '4ed7511acb009 '));
		self::assertFalse($this->object->validate($this->password2, '091b5bd20c8ce45988793c64a3a11aeed7c300a0', '4ed7511acb009'));
		
		self::assertFalse($this->object->validate($this->password, null, '4ed7511acb009'));
	}
	
	/**
	 * @expectedException Supra\Authentication\Exception\RuntimeException
	 */
	public function testValidateException()
	{
		self::assertFalse($this->object->validate($this->password, '091b5bd20c8ce45988793c64a3a11aeed7c300a0', null));
	}

}
