<?php

namespace Supra\Proxy;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class SupraFileStorageEntityImageSizeProxy extends \Supra\FileStorage\Entity\ImageSize implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function setWidth($width)
    {
        $this->__load();
        return parent::setWidth($width);
    }

    public function setHeight($height)
    {
        $this->__load();
        return parent::setHeight($height);
    }

    public function getWidth()
    {
        $this->__load();
        return parent::getWidth();
    }

    public function getHeight()
    {
        $this->__load();
        return parent::getHeight();
    }

    public function setQuality($quality)
    {
        $this->__load();
        return parent::setQuality($quality);
    }

    public function getQuality()
    {
        $this->__load();
        return parent::getQuality();
    }

    public function setName($sizeName)
    {
        $this->__load();
        return parent::setName($sizeName);
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function getFolderName()
    {
        $this->__load();
        return parent::getFolderName();
    }

    public function setMaster(\Supra\FileStorage\Entity\Image $master)
    {
        $this->__load();
        return parent::setMaster($master);
    }

    public function getMaster()
    {
        $this->__load();
        return parent::getMaster();
    }

    public function setTargetWidth($width)
    {
        $this->__load();
        return parent::setTargetWidth($width);
    }

    public function getTargetWidth()
    {
        $this->__load();
        return parent::getTargetWidth();
    }

    public function setTargetHeight($height)
    {
        $this->__load();
        return parent::setTargetHeight($height);
    }

    public function getTargetHeight()
    {
        $this->__load();
        return parent::getTargetHeight();
    }

    public function setCropMode($cropped)
    {
        $this->__load();
        return parent::setCropMode($cropped);
    }

    public function getCropMode()
    {
        $this->__load();
        return parent::getCropMode();
    }

    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function equals(\Supra\Database\Entity $entity)
    {
        $this->__load();
        return parent::equals($entity);
    }

    public function __toString()
    {
        $this->__load();
        return parent::__toString();
    }

    public function getProperty($name)
    {
        $this->__load();
        return parent::getProperty($name);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'master', 'width', 'height', 'name', 'quality', 'targetWidth', 'targetHeight', 'cropMode', 'id');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}