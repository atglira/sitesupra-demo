<?php

namespace Supra\Proxy\History;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class SupraControllerPagesEntityAbstractionAbstractPageProxy extends \Supra\Controller\Pages\Entity\Abstraction\AbstractPage implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getPlaceHolders()
    {
        $this->__load();
        return parent::getPlaceHolders();
    }

    public function getLocalizations()
    {
        $this->__load();
        return parent::getLocalizations();
    }

    public function getLocalization($locale)
    {
        $this->__load();
        return parent::getLocalization($locale);
    }

    public function setLocalization(\Supra\Controller\Pages\Entity\Abstraction\Localization $data)
    {
        $this->__load();
        return parent::setLocalization($data);
    }

    public function addPlaceHolder(\Supra\Controller\Pages\Entity\Abstraction\PlaceHolder $placeHolder)
    {
        $this->__load();
        return parent::addPlaceHolder($placeHolder);
    }

    public function getLeftValue()
    {
        $this->__load();
        return parent::getLeftValue();
    }

    public function getRightValue()
    {
        $this->__load();
        return parent::getRightValue();
    }

    public function getLevel()
    {
        $this->__load();
        return parent::getLevel();
    }

    public function setLeftValue($left)
    {
        $this->__load();
        return parent::setLeftValue($left);
    }

    public function setRightValue($right)
    {
        $this->__load();
        return parent::setRightValue($right);
    }

    public function setLevel($level)
    {
        $this->__load();
        return parent::setLevel($level);
    }

    public function moveLeftValue($diff)
    {
        $this->__load();
        return parent::moveLeftValue($diff);
    }

    public function moveRightValue($diff)
    {
        $this->__load();
        return parent::moveRightValue($diff);
    }

    public function moveLevel($diff)
    {
        $this->__load();
        return parent::moveLevel($diff);
    }

    public function getNodeTitle()
    {
        $this->__load();
        return parent::getNodeTitle();
    }

    public function __call($method, $arguments)
    {
        $this->__load();
        return parent::__call($method, $arguments);
    }

    public function removeTrigger()
    {
        $this->__load();
        return parent::removeTrigger();
    }

    public function free()
    {
        $this->__load();
        return parent::free();
    }

    public function isBlockPropertyEditable(\Supra\Controller\Pages\Entity\BlockProperty $blockProperty)
    {
        $this->__load();
        return parent::isBlockPropertyEditable($blockProperty);
    }

    public function isBlockEditable(\Supra\Controller\Pages\Entity\Abstraction\Block $block)
    {
        $this->__load();
        return parent::isBlockEditable($block);
    }

    public function isBlockManageable(\Supra\Controller\Pages\Entity\Abstraction\Block $block)
    {
        $this->__load();
        return parent::isBlockManageable($block);
    }

    public function isPlaceHolderEditable(\Supra\Controller\Pages\Entity\Abstraction\PlaceHolder $placeHolder)
    {
        $this->__load();
        return parent::isPlaceHolderEditable($placeHolder);
    }

    public function setNestedSetNode(\Supra\NestedSet\Node\DoctrineNode $nestedSetNode)
    {
        $this->__load();
        return parent::setNestedSetNode($nestedSetNode);
    }

    public function setGlobal($global)
    {
        $this->__load();
        return parent::setGlobal($global);
    }

    public function getGlobal()
    {
        $this->__load();
        return parent::getGlobal();
    }

    public function isGlobal()
    {
        $this->__load();
        return parent::isGlobal();
    }

    public function isLocal()
    {
        $this->__load();
        return parent::isLocal();
    }

    public function getDiscriminator()
    {
        $this->__load();
        return parent::getDiscriminator();
    }

    public function matchDiscriminator(\Supra\Controller\Pages\Entity\Abstraction\Entity $object)
    {
        $this->__load();
        return parent::matchDiscriminator($object);
    }

    public function authorize(\Supra\User\Entity\Abstraction\User $user, $permission, $grant)
    {
        $this->__load();
        return parent::authorize($user, $permission, $grant);
    }

    public function getAuthorizationId()
    {
        $this->__load();
        return parent::getAuthorizationId();
    }

    public function getAuthorizationClass()
    {
        $this->__load();
        return parent::getAuthorizationClass();
    }

    public function getAuthorizationAncestors()
    {
        $this->__load();
        return parent::getAuthorizationAncestors();
    }

    public function setRevisionId($revisionId)
    {
        $this->__load();
        return parent::setRevisionId($revisionId);
    }

    public function getRevisionId()
    {
        $this->__load();
        return parent::getRevisionId();
    }

    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function equals(\Supra\Database\Entity $entity)
    {
        $this->__load();
        return parent::equals($entity);
    }

    public function __toString()
    {
        $this->__load();
        return parent::__toString();
    }

    public function getProperty($name)
    {
        $this->__load();
        return parent::getProperty($name);
    }

    public function getNestedSetRepositoryClassName()
    {
        $this->__load();
        return parent::getNestedSetRepositoryClassName();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'localizations', 'left', 'right', 'level', 'global', 'id', 'revision');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}