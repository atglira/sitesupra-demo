<?php

namespace Supra\Proxy;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class SupraControllerPagesEntityPagePlaceHolderProxy extends \Supra\Controller\Pages\Entity\PagePlaceHolder implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    private function _load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister);
            unset($this->_identifier);
        }
    }

    
    public function setPage(\Supra\Controller\Pages\Entity\Page $page)
    {
        $this->_load();
        return parent::setPage($page);
    }

    public function getPage()
    {
        $this->_load();
        return parent::getPage();
    }

    public function setMaster(\Supra\Controller\Pages\Entity\Abstraction\Page $master)
    {
        $this->_load();
        return parent::setMaster($master);
    }

    public function setName($name)
    {
        $this->_load();
        return parent::setName($name);
    }

    public function getName()
    {
        $this->_load();
        return parent::getName();
    }

    public function getLocked()
    {
        $this->_load();
        return parent::getLocked();
    }

    public function getBlocks()
    {
        $this->_load();
        return parent::getBlocks();
    }

    public function addBlock(\Supra\Controller\Pages\Entity\Abstraction\Block $block)
    {
        $this->_load();
        return parent::addBlock($block);
    }

    public function getProperty($name)
    {
        $this->_load();
        return parent::getProperty($name);
    }


    public function __sleep()
    {
        if (!$this->__isInitialized__) {
            throw new \RuntimeException("Not fully loaded proxy can not be serialized.");
        }
        return array('page', 'blocks', 'id', 'name');
    }
}