Supra.Manager.Action.Base extends Y.Base (EventTarget + Attribute + Plugin host)

	--- EVENTS ---
	
	All following events are also fired on Supra.Manager, but prefixed with
	action name. Example: "EditorToolbar:ready"
	
	load
		Fired when action resources started loading
	
	ready
		Fired when all resources are loaded

	initialize
		Fired before action is rendered
	
	render
		Fired after action is rendered
		
	execute
		Fired when action is executed	

	--- EXECUTION ---

	bind(fn)
		Returns function which will execute in Action context
		
	show()
	hide()
		Show/hide action, Action plugins are responsible for showing/hiding elements
		
	execute(args)
		Execute Action
	
	getPath()
		Returns action path
	
	getName()
		Returns action name
	
	isInitialized()
		Returns true if action is initialized, otherwise false
		
	isReady()
		Returns true if action is ready, otherwise false
	
	
	--- RESOURCES ---
	
	
	setHasStylesheet(has_stylesheet)
		Set if action has stylesheet, will use default stylesheet path
	
	getHasStylesheet()
		Returns true if action has stylesheet
	
	setStylesheetPath(path)
		Change stylesheet path
	
	getStylesheetPath()
		Returns stylesheet path, for example: "/cms/content-manager/pageinfo/pageinfo.css"
	
	setHasTemplate(has_template)
		Set if action has template, will use default template path
	
	getHasTemplate()
		Returns true if action has template
	
	setTemplatePath(path)
		Change template path
	
	getTemplatePath()
		Returns template path, for example: "/cms/content-manager/pageinfo/pageinfo.html"
	
	setDataPath(path)
		Change data path.	
	
	getDataPath()
		Returns data path
	
	setPlaceHolder(node)
		Set place holder node where action content will be inserted
	
	getPlaceHolder()
		Returns place holder node
	
	getContainers()
		Returns action container nodes
	
	getContainer(selector)
		Returns action container node matching css selector or first container node
	
	
	--- PLUGINS, WIDGETS ---
	
	plugins
		Supra.Manager.Action.PluginBase instance
	
	importMethods(widget, methods)
		Creates method for action, which will call widget method when called
	
	bubbleEvents(widget, events)
		Bubble widgets events to action, when event is triggered on widget it will be also triggered on action 
		
	bindAttributes(widget, attributes)
		Bind widget attribute to action attribute, when ones attribute changes others attribute is changed also
	
	getPluginWidgets(plugin_name, as_array)
		Returns all widgets for given plugin
	
	
	--- CHILDREN ACTIONS ---
	
	addChildAction(action_id)
		Add children action, when parent is hidden all child actions are also hidden
	
	getChildActions()
		Returns children actions
		
	getActiveChildActions()
		Returns children actions which state is 'ready'
		