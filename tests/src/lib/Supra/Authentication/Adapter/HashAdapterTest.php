<?php

namespace Supra\Tests\Authentication\Adapter;

use Supra\Tests\ObjectRepository\Mockup\ObjectRepository;

require_once dirname(__FILE__) . '/../../../../../../src/lib/Supra/Authentication/Adapter/HashAdapter.php';

/**
 * Test class for HashAdapter.
 * Generated by PHPUnit on 2011-11-01 at 18:11:23.
 */
class HashAdapterTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var HashAdapter
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->object = new HashAdapter;
		ObjectRepository::setCallerParent($this->object, $this);
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
		ObjectRepository::restoreCurrentState();
	}

	/**
	 */
	public function testFindUser()
	{
		$password = new \Supra\Authentication\AuthenticationPassword('admin');
		$user = $this->object->findUser('admin', $password);
		
		self::assertNull($user);
	}

	/**
	 */
	public function testAuthenticateOk()
	{
		$user = new \Supra\User\Entity\User();
		$user->setLogin('admin@admin.com');
		$user->setEmail('admin@admin.com');
		$password = new \Supra\Authentication\AuthenticationPassword('admin123');
		
		$this->object->credentialChange($user, $password);
		$this->object->authenticate($user, $password);
	}
	
	/**
	 * @expectedException \Supra\Authentication\Exception\WrongPasswordException
	 */
	public function testAuthenticateFailure()
	{
		$user = new \Supra\User\Entity\User();
		$user->setLogin('admin@admin.com');
		$user->setEmail('admin@admin.com');
		$password = new \Supra\Authentication\AuthenticationPassword('admin123');
		$wrongPassword = new \Supra\Authentication\AuthenticationPassword('admin');
		
		$this->object->credentialChange($user, $password);
		$this->object->authenticate($user, $wrongPassword);
	}

	/**
	 */
	public function testCredentialChange()
	{
		$user = new \Supra\User\Entity\User();
		$user->setLogin('admin@admin.com');
		$user->setEmail('admin@admin.com');
		$password = new \Supra\Authentication\AuthenticationPassword('admin123');
		
		self::assertEmpty($user->getPassword());
		
		$this->object->credentialChange($user, $password);
		
		$password1 = $user->getPassword();
		self::assertNotEmpty($password1);
		
		// Password hash should be 40 characters
		self::assertEquals(40, strlen($password1));
		
		// Credential change resets salt now automatically
		$this->object->credentialChange($user, $password);
		
		$password2 = $user->getPassword();
		self::assertNotEquals($password1, $password2);
		
		$newPassword = new \Supra\Authentication\AuthenticationPassword('admin1234');
		$this->object->credentialChange($user, $newPassword);
		
		$password3 = $user->getPassword();
		self::assertNotEquals($password1, $password3);
	}

}
